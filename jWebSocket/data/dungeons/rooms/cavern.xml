<?xml version="1.0" encoding="UTF-8"?>
<rooms>
	<room id="cavern">
	    <generator>
	    <![CDATA[
	    var xOffset = DIGGER.randomI(0, DIGGER.cellsize / 2);
        var yOffset = DIGGER.randomI(0, DIGGER.cellsize / 2);
        var remainingRoom = Math.min(DIGGER.cellsize - xOffset, DIGGER.cellsize - yOffset); 
        var size = DIGGER.randomI(4, remainingRoom);
        var floorMaterial = MAT_DIRT_FLOOR_0;
        var wallMaterial = MAT_DIRT_BLOCK_0;
        
        if (_args_.x != undefined) {
           xOffset = _args_.x; 
        }
        
        if (_args_.y != undefined) {
           yOffset = _args_.y; 
        }
            
        if (_args_.size != undefined) {
           size = _args_.size; 
        }
        
        if (_args_.floor != undefined) {
           floorMaterial = _args_.floor; 
        }
        
        if (_args_.wall != undefined) {
           wallMaterial = _args_.wall; 
        }
        
	    function isFloor(probability) {
	        var randomProb = DIGGER.randomI(0, 100);
	        if (randomProb < probability)
	            return false;
	        else
	            return true;
	    };
	    
	    function generation(size, r1Cutoff, r2Cutoff, helperGrid, secondPass) {
	        for (var yi = yOffset + 1; yi < yOffset + size - 1; yi++) {
	            for (var xi = xOffset + 1; xi < xOffset + size - 1; xi++) {
	            
	                var adjcount_r1 = 0;
	                var adjcount_r2 = 0;
	    
	                for (var ii = -1; ii <= 1; ii++) {
	                    for (var jj = -1; jj <= 1; jj++) {
	                        var material = DIGGER.cellTileMaterial(xi+jj, yi+ii);
	                        if (!material.equals(wallMaterial))
	                             adjcount_r1++;
	                    }
	                }
	                
	                for (var ii = yi-2; ii <= yi+2; ii++) {
	                    for (var jj = xi-2; jj <= xi+2; jj++) {
	                        if (Math.abs(ii-yi) == 2 && Math.abs(jj-xi) == 2)
	                            continue;
	                        
	                        if (ii < 0 || jj < 0 || ii >= size || jj >= size)
	                            continue;
	                    
	                        var material = DIGGER.cellTileMaterial(jj, ii);
	                        if (!material.equals(wallMaterial))
	                             adjcount_r2++;
	                    }
	                }
	                
	                if (!secondPass) {
	                    if(adjcount_r1 >= r1Cutoff || adjcount_r2 <= r2Cutoff)
	                        helperGrid[xi][yi] =  floorMaterial; 
	                    else
	                        helperGrid[xi][yi] =  wallMaterial;
	               }
	               else {
	                   if(adjcount_r1 >= r1Cutoff)
	                        helperGrid[xi][yi] =  floorMaterial; 
	                    else
	                        helperGrid[xi][yi] =  wallMaterial;
	               }
	            }
	        }
	        
	        for (var yi = yOffset + 1; yi < yOffset + size - 1; yi++) {
                for (var xi = xOffset + 1; xi < xOffset + size - 1; xi++) {
                    DIGGER.digCellTile(xi, yi, helperGrid[xi][yi]);
                }
            }
	    }
	    
	    var helperGrid = new Array();
        for (var x = xOffset; x < xOffset + size; x++) {
            helperGrid[x] = new Array();
            for (var y = yOffset; y < yOffset + size; y++) {
                //init helper grid
                helperGrid[x][y] =  DIGGER.cellTileMaterial(x, y);
             
                //init cell map
                if (isFloor(40))
                    DIGGER.digCellTile(x, y, floorMaterial);
            }
        }
	    
	    for (var i = xOffset; i < xOffset + size; i++) {
	       DIGGER.digCellTile(i, yOffset,  wallMaterial);
	       DIGGER.digCellTile(i, yOffset + size-1,  wallMaterial);
	    }
	    
	    for (var i = yOffset; i < yOffset + size; i++) {
           DIGGER.digCellTile(xOffset, i,  wallMaterial);
           DIGGER.digCellTile(xOffset + size-1, i,  wallMaterial);
        }
	    
	    for (var i = 0; i < 4; i++) {
	        generation(size, 5, 2, helperGrid, false);
	    }
	    
	    for (var i = 0; i < 3; i++) {
	        generation(size, 5, 2, helperGrid, true);
	    }
	    ]]>
	    </generator>
	</room>
</rooms>